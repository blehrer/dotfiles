#
## Overrides
alias fzf="fzf --preview 'file {}' --bind '?:preview:bat {}'"
#alias ls="ls -LH"
alias ls='exa'
alias tree='exa --tree'
alias cd-='cd -'
alias nv='nvim'

## Places
alias @wh='cd $WHOME'
alias wh='@wh'
alias @w='cd $WORKPLACE'
alias w='@w'
alias @dfd='cd $DOTFILES_HOME'
alias dfd='@dfd'
alias @notes='cd "$NOTES"'
alias notes='@notes'
alias nn='@notes ; vim untitled.md'
alias @scratch='cd $HOME/scratch'
alias scratch='nvim $HOME/scratch/scratch-$(date "+%F-%T")'
alias @dl='cd $HOME/Downloads'
alias dl='cd $HOME/Downloads'
alias @aws='cd $HOME/.aws'
alias @http='cd $HTTP_ROOT'
alias @='@_task'
alias @@='@task $(git branch --show-current) 2>/dev/null; yagdconf'
alias @task='@@'
alias @@@='@ $(cat $TASK_HOME/.task-mru)'
alias @@@@='cd $NBCUOTS/$(cat $(git rev-parse --show-toplevel)/.yagconf)'
alias @d='@config'
alias @dq='@config sqe'
alias jj='cat $TASK_HOME/.task-mru | pbcopy'
alias jjlink="echo https://jira.inbcu.com/browse/FSCT-`cat $TASK_HOME/.task-mru` | clip.exe"
alias gh='github'

function github() {
    _github | xclip
    echo Copied \'$(xclip -o)\' to clipboard
}

[[ $(uname -a) = MINGW* ]] || [[ $(uname -a) = CYGWIN* ]] && {
    source $DOTFILES_HOME/windows_aliases
}

source $DOTFILES_HOME/nbcu_aliases
source $DOTFILES_HOME/mac_aliases

function _github() {
    local branch=$(basename $(git symbolic-ref --short refs/remotes/origin/HEAD))
    [[ $branch ]] && {
        git remote get-url origin |
        sed -e 's/git@//g; s/\.git//g; s/:/\//g' |
        xargs -I _url_ echo https://_url_/tree/$branch/$(fzf)
    } || return 1
    return
}

function @logs() {
    declare -A exceptions
    exceptions[cds-ingest-mpx]="digsrv-cds-ingest-mpx"
    exceptions[cds-ingest-qa]="digsrv-cds-ingest-mpx-sqe"
    exceptions[cp-transfer-performance-tests]="cp-manatees-performance-tests"
    [[ $(pwd) =~ $NBCUOTS/* ]] && {
        cd $WORKPLACE/output/$(basename $(git rev-parse --show-toplevel))
        return
    }
    [[ $(pwd) =~ $TASK_HOME/* ]] && {
        cd $WORKPLACE/output/$(cat $(git rev-parse --show-toplevel)/.yagconf)
        return
    }
    echo "Not sure where the logs are?"
    return 1
}

function @repo() {
    declare -A exceptions
    exceptions[cds-ingest-mpx]="digsrv-cds-ingest-mpx"
    exceptions[cds-ingest-qa]="digsrv-cds-ingest-mpx-sqe"
    exceptions[cp-transfer-performance-tests]="cp-manatees-performance-tests"
    [ $1 ] && local suffix=$1
    [[ $(pwd) = $WORKPLACE/output/* ]] && {
        cd $ONAIR/$(basename $(pwd))/$suffix
        return
    }
    [[ $(pwd) = $TASK_HOME/* ]] && {
        cd $ONAIR/$(cat $(git rev-parse --show-toplevel)/.yagconf)/$suffix
        return
    }
    [[ $(pwd) = $NBCUOTS/*-config-repo/* ]] && {
        cd $NBCUOTS/$(basename $(pwd) | sed -e 's/-sqe$//g')/$suffix
        return
    }
    echo "Not sure where the repo is?"
    return 1
}

function @_task() {
    ([[ $(pwd) =~ $NBCUOTS/* ]] || [[ $(pwd) =~ $ONAIR/* ]] ) && [[ $1 ]] && updateMru=1
    source $DOTFILES_HOME/bin/.task ${@}
    [ $updateMru ] && {
        basename $(pwd) > $TASK_HOME/.task-mru
        pushd $DOTFILES_HOME
        git add homedir/.task-mru
        git commit -m "task-mru: update to $(cat $TASK_HOME/.task-mru)"
        popd
    }
}

function yagdconf() {
    echo $(basename ${$(dirs)[2]}) >> .yagconf |
        uniq |
        sed -e "s/.*config-repo//g" |
        tee .yagconf
    git add .yagconf
    git commit -m ".yagconf"
}

## Tools
function pushd() {
  if [ $# -eq 0 ]; then
    DIR="${HOME}"
  else
    DIR="$1"
  fi

  builtin pushd "${DIR}" > /dev/null
}

function pushd_builtin() {
  builtin pushd > /dev/null
}

function popd() {
  builtin popd > /dev/null
  dirs
}

# vim sessions

function vimsesh {
  reporoot=`git rev-parse --show-toplevel`
  if [ $? ]; then
    if [ -e ~/.vim/sessions$reporoot/session.vim ]; then
      vim -S ~/.vim/sessions$reporoot/session.vim -c "cd $reporoot" ${@}
    else
      vim ${@}
    fi
  fi
  return
}

# vim, vertical split
alias vs='vim -O'
# vim, tabs
alias vt='vim -p'
alias vsh='vimsesh'
alias brave='brave-browser $1 &> /dev/null &'
alias ag='ag --hidden'
alias c='clear'
alias cd='pushd'
alias code="$WHOME/AppData/Local/Programs/Microsoft\ VS\ Code/bin/code"
alias back='popd'
alias flip='pushd_builtin'
alias egrep='egrep -i --color=auto'
alias epoch='date +%s'
alias epochMillis='gdate +%s%N | cut -b1-13'
alias epochMicros='gdate +%s%N | cut -b1-16'
alias epochNanos='gdate +%s%N'
function gamf { git commit -a --fixup "${@:-@}" }
alias gb='git branch'
alias bcp='git branch-name | pbcopy'
alias gbackup='git push backup --force "refs/heads/*:refs/heads/*"'
alias gbls="git branch -vv | egrep -v '^\s*(ABANDONED|DONE)'"
alias gbo='gbls | grep -o DONE'
alias gbu='echo "The upstream branch: $(git rev-parse --abbrev-ref --symbolic-full-name @{u})"' #print this branch's upstream branch
alias gc='git checkout'
alias gcu='git checkout @{u}'
alias gd='git diff'
alias gdu='git diff @{u}'
alias gds='git diff --staged'
alias glg='git log --graph --tags --decorate --oneline $(git rev-parse --abbrev-ref --symbolic-full-name HEAD @{u})' #show the git DAG as a graph
alias glga='git log --graph --decorate --oneline --all' #show the git DAG as a graph
alias gpom='git push origin HEAD:master'
alias grep='grep -i --color=auto'
alias gri='git rebase -i'
alias gria='git rebase -i --autosquash'
alias garia='gamf; gria'
alias grim='git rebase -i origin/master'
alias gst='git status'
alias gsub='git submodule update --remote --merge'
alias lg=lazygit
alias ivm='vim'
alias k='kubectl'
alias ll='ls -alh'
alias intellij=idea
alias prepl='perl -d -e 1'
alias vd='vim ./.'
alias vmi='vim'
alias vj='vim $HOME/Documents/notes/Vim.md'
alias secretstring='jq ".SecretString|fromjson"'
alias yagd="source $DOTFILES_HOME/bin/.yagd -q"
alias yagdq="source $DOTFILES_HOME/bin/.yagd -s sqe -q"

## Edit config files
alias vv='vim $DOTFILES_HOME/vimrc'
alias vz='vim -O $HOME/.zshrc $DOTFILES_HOME/zshrc'
alias b='vim $DOTFILES_HOME/bashrc'
alias a='vim -O $DOTFILES_HOME/*aliases'
alias e='vim $DOTFILES_HOME/environment_variables'
alias oz='vim $CONFIG_DIR/zsh/oh-my-zsh.cfg'
alias iam='vim $AWS_SHARED_CREDENTIALS_FILE'
alias agig='vim $DOTFILES_HOME/ag/.agignore'
alias gig='vim $DOTFILES_HOME/git/gitignore_global'
alias sc='vim $HOME/.ssh/config'

function iampb(){
    cat ~/.aws/credentials | sed -e "s/ //g; s/=\(.*\)/='\1'/g" > ~/.aws/credentials.new
    for line in $(pbpaste | sed -e 's/\[.*\]//g'); do
        if [[ $line ]]; then
            dasel put -f ~/.aws/credentials.new -o ~/.aws/credentials.new -r toml -t string -w toml \
                -s default.$(echo $line | sed -e "s/=\(.*\)/ -v '\1'/")
        fi
    done
    cat ~/.aws/credentials.new | sed -e "s/'//g ; s/\"//g" > ~/.aws/credentials
}

function idea() {
  local version=`find ~/.cache/JetBrains/ -maxdepth 1 -mindepth 1 -type d | tail -n 1`
  local timestamp=`date +%Y-%m-%d-%H%M%z.%s`
  local logfile="$version/log/runtime/idea.$timestamp.log"
  echo logfile: $logfile
  dex $APPS/jetbrains-idea.desktop &> $logfile &
}

## Re-source files
function src() {
    for s in $@; do
        echo "Sourcing $s"
        source "$s"
    done
}


alias sb='src ~/.bashrc'
alias sz='exec zsh'
alias soz='src $CONFIG_DIR/zsh/oh-my-zsh.cfg'
alias sa='src $DOTFILES_HOME/*aliases'
alias se='src $DOTFILES_HOME/environment_variables'

alias k8s="kubernetes"

fuck () {
    TF_PYTHONIOENCODING=$PYTHONIOENCODING;
    export TF_SHELL=zsh;
    export TF_ALIAS=fuck;
    TF_SHELL_ALIASES=$(alias);
    export TF_SHELL_ALIASES;
    TF_HISTORY="$(fc -ln -10)";
    export TF_HISTORY;
    export PYTHONIOENCODING=utf-8;
    TF_CMD=$(
        thefuck THEFUCK_ARGUMENT_PLACEHOLDER $@
    ) && eval $TF_CMD;
    unset TF_HISTORY;
    export PYTHONIOENCODING=$TF_PYTHONIOENCODING;
    test -n "$TF_CMD" && print -s $TF_CMD
}

gw () {
    local tld=$(git rev-parse --show-toplevel)
    eq=$(test $(pwd) = "${tld}")
    "${eq}" || pushd "${tld}"
    ./gradlew $@
    "${eq}" || popd
}

hgrep() {
    fc -Dlim "*$@*" 1
}

mkpwd() {
    mkdir $1 && cd $1
}
