shellname=$(echo $0 | xargs basename | sed -e 's/-//')
# ((( PATH
export PATH="$HOME/.local/bin:${PATH}"
export PATH="${HOME}/.local/share/nvim/mason/bin:${PATH}"
export PATH="$HOME/go/bin:${PATH}"
source ${HOME}/.cargo/env

{{if eq .chezmoi.os "linux"}}
export PATH="/opt/nvim:${PATH}"
{{end}}

export PNPM_HOME="$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

export PATH="$HOME/.rd/bin:$PATH"


{{ if eq .chezmoi.os "linux" -}}
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
{{ else if eq .chezmoi.os "darwin" -}}
export PATH="/opt/homebrew/bin:$PATH"
{{- end}}
# PATH)))

# (((FZF
# fzf_cfg="${XDG_CONFIG_HOME:-$HOME/.config}"/fzf/fzf.$shellname
# if [ -f $fzf_cfg ]; then
#   source $fzf_cfg
# fi
# )))

#((( CLI conveniences
alias n=nvim
alias vim=nvim
alias ivm=nvim
alias vimdiff='nvim -d'
alias vo='nvim -c "Oil"'
alias vd='nvim'
alias @nv="cd ${HOME}/.config/nvim"
alias nv="@nv; n"
alias nvo="@nv; vo"
alias nvd="nvd"
alias nvc=nvo
alias ag='rg'

alias cz=chezmoi

alias l=eza
alias ll='l --long --all'
alias tree='l --tree --ignore-glob ".git/*|node_modules/*"'

alias mkdir='mkdir -p'

alias lg="lazygit -ucd ${HOME}/.config/lazygit"

alias icat='kitten icat'
alias kc='cz edit ${HOME}/.config/kitty/kitty.conf'

export OBSIDIAN_VAULT="$HOME/vaults/noe"
alias nn="cd ${OBSIDIAN_VAULT}; nvim -c 'lua require(\"obsidian\")' -c 'ObsidianNew'"
alias @scratch="cd ${OBSIDIAN_VAULT}/notes/dailies"
alias @notes="cd ${OBSIDIAN_VAULT}/notes"
alias scratch="nn"

export DOTFILES_HOME="$(cz dump-config | jq -r '.workingTree')"
alias @dfd="cz cd"
alias dfd="@dfd; vd"

alias z='cz edit ${DOTFILES_HOME}/home/.chezmoitemplates/rc_profile'
alias sz='cz apply ${HOME}/.zshrc; source ${HOME}/.zshrc'
alias sb='cz apply ${HOME}/.bashrc; source ${HOME}/.bashrc'

alias fzf="fzf --preview 'file {}' --bind '?:preview:bat {}'"

[ $(command -v fdfind) ] && alias fd=fdfind

alias nu="XDG_CONFIG_HOME=${HOME}/.config nu"
function brew {
  case $1 in
    install)
      ;&
    uninstall)
      command brew "$@"
      local brewfile=$DOTFILES_HOME/assets/Brewfile
      echo "Dumping changed Brewfile ($brewfile)"
      brew bundle dump --file=$brewfile --force
      if [ $? ] && [[ "true" = $(cz dump-config | jq '.git.autocommit') ]]; then
        pushd $DOTFILES_HOME
        if [ $? ] && [ ! $(git diff --quiet) ]; then
          echo "Adding changes to Brewfile"
          git add $brewfile
          echo "Commiting changes to Brewfile"
          git commit -m "Update assets/Brewfile"
          if [ $? ] && [[ "true" = $(cz dump-config | jq '.git.autopush') ]]; then
            echo "Pushing changes to Brewfile"
            git push origin
          fi
        else
          echo "No change to Brewfile"
        fi
        popd
      fi
      ;;
    *)
      command brew "$@"
      ;;
  esac
}
# CLI Conveniences)))

# ((( Project aliases
function res {
	local input=$1
	local dest="${WORKSPACE}/blehrer/resonance"
	[ $input ] && cd $dest/$input || cd $dest
}
function bl {
	local input=$1
	local dest="${WORKSPACE}/blehrer"
	[ $input ] && cd $dest/$input || cd $dest
}
alias blog='bl blehrer.github.io.git/ && chruby ruby-3.4.1'
# Project aliases)))

#((( Git conveniences
function gamf {
  git commit -a --fixup "${@:-@}"
}
alias gb='git branch'
alias gbls="git branch -vv | egrep -v '^\s*(ABANDONED|DONE)'"
alias gbu='echo "The upstream branch: $(git rev-parse --abbrev-ref --symbolic-full-name @{u})"'
alias gc='git checkout'
alias gd='git diff'
alias gds='git diff --staged'
alias glg='git log --graph --tags --decorate --oneline $(git rev-parse --abbrev-ref --symbolic-full-name HEAD @{u})'
alias glga='git log --graph --decorate --oneline --all'
alias gri='git rebase -i'
alias gria='git rebase -i --autosquash'
alias garia='gamf; gria'
alias grim='git rebase -i origin/master'
alias gst='git status'
# Git conveniences )))

#((( Java conveniences
function gw {
  [ -n 'gradlew' ] && ./gradlew $@ && return
  local tld=$(git rev-parse --show-toplevel)
  if [ $? ]; then
    eq=$(test $(pwd) = "${tld}")
    "${eq}" || pushd "${tld}"
    ./gradlew $@
    "${eq}" || popd
  fi
}
# Java conveniences )))

# ((( Command History
function hgrep {
  fc -Dlim "*$@*" 1
}
# Command History )))

# ((( Text Search
function fif {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" |
  fzf --preview "highlight -O ansi -l {} 2> /dev/null | \
  rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || \
  rg --ignore-case --pretty --context 10 '$1' {}"
}
# )))

#(((Neovim experimentation
function nuke-nv {
  rm -rf "$HOME/.local/share/nvim" "$HOME/.local/state/nvim" "$HOME/.cache/nvim"
  [ -d "${HOME}/.local/share/nvim" ] && echo 'share not deleted' && exit 1
  [ -d "${HOME}/.local/state/nvim" ] && echo 'state not deleted' && exit 1
  [ -d "${HOME}/.cache/nvim" ] && echo 'cache note deleted' && exit 1
  mkdir "${HOME}/.config/.bk"
  echo 'about to mv "${HOME}/.config/nvim" "${HOME}/.config/bk". Please confirm w/ sudo.'
  sudo mv "${HOME}/.config/nvim" "${HOME}/.config/bk"
}
#)))

#((( SSL
# https://certbot.eff.org/
alias certbot="certbot \
  --config-dir ${HOME}/.config/certbot \
  --work-dir ${HOME}/.local/share/certbot \
  --logs-dir ${HOME}/.local/state/certbot/logs"

function self-signed-ssl-certificate {
  openssl req -x509 -out localhost.crt -keyout localhost.key \
    -newkey rsa:2048 -nodes -sha256 \
    -subj '/CN=localhost' -extensions EXT -config <( \
    printf "[dn]\nCN=localhost\n[req]\ndistinguished_name = dn\n[EXT]\nsubjectAltName=DNS:localhost\nkeyUsage=digitalSignature\nextendedKeyUsage=serverAuth")
}
#)))

#(((Yazi
function y {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}
alias ranger=y
#)))

#((( Tools
eval "$(mise activate $shellname)"

# Init toolchain with mise
function mise-toolchain {
  mise list --missing | awk '{print $1"@"$5}' | xargs mise use
}

export EDITOR=nvim
export SUDO_EDITOR=nvim

export STARSHIP_CONFIG=${XDG_CONFIG_HOME:-$HOME/.config}/starship/starship.toml
eval "$(starship init $shellname)"

eval "$(thefuck --alias)"

[ $(command -v luarocks) ] && eval $(luarocks path --bin)


# function fzfCompletion {
#   local version=$(fzf --version)
#   if [[ $version > "0.47" ]]; then
#     source <(fzf --zsh)
#   else
#     # local localCompletion="${HOME}/.local/share/zsh/site-functions/_fzf"
#     # [ -f $localCompletion ] || curl https://raw.githubusercontent.com/junegunn/fzf/refs/tags/$version/shell/completion.zsh > $localCompletion
#     # source $localCompletion
#     source ${HOME}/.local/share/zsh/custom/fzf-tab-completion/zsh/fzf-zsh-completion.sh
#   fi
# }
# if [[ 'zsh' = $shellname ]] ; then
#   fzfCompletion
# fi

export RANGER_LOAD_DEFAULT_RC=FALSE

# Mise currently failing to install ruby on my mac, so here is a workaround
source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh
source $(brew --prefix)/opt/chruby/share/chruby/auto.sh
RUBY_3=$(ls ${HOME}/.rubies | egrep 'ruby-3\.*' | tail -n1)
mise link --force ruby@3 ${HOME}/.rubies/${RUBY_3} && mise reshim
unset RUBY_3
# Tools )))

# vim: ts=2 sts=2 sw=2 et foldmethod=marker ft=sh.tmpl foldmarker=(((,)))
