# {{{ setopt imperatives
setopt append_history
setopt inc_append_history
setopt share_history
setopt complete_in_word
setopt no_beep
setopt autocd
setopt autopushd
setopt pushdsilent
setopt pushdignoredups
setopt nomailwarning
# }}}

# {{{ keybindings
bindkey -v
bindkey "^R" history-incremental-search-backward
bindkey "^E" end-of-line
bindkey "^A" beginning-of-line
bindkey "^N" push-line-or-edit
# }}}

# {{{ vi cursor fix
_fix_cursor() {
   echo -ne '\e[5 q'
}

precmd_functions+=(_fix_cursor)
# }}}

# {{{ autoloads
autoload -U colors && colors
autoload sticky-note
# }}}

# {{{ completion
#   ____ ___  __  __ ____  _     _____ _____ ___ ___  _   _
#  / ___/ _ \|  \/  |  _ \| |   | ____|_   _|_ _/ _ \| \ | |
# | |  | | | | |\/| | |_) | |   |  _|   | |  | | | | |  \| |
# | |__| |_| | |  | |  __/| |___| |___  | |  | | |_| | |\  |
#  \____\___/|_|  |_|_|   |_____|_____| |_| |___\___/|_| \_|
#

# +---------+
# | General |
# +---------+

# export environment variables used in completions
export WORKSPACE="${HOME}/workspace"

# Load more completions
fpath=(${HOME}/.local/share/zsh/site-functions $fpath)

# Should be called before compinit
zmodload zsh/complist

# Use hjlk in menu selection (during completion)
# Doesn't work well with interactive mode
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -M menuselect 'l' vi-forward-char

bindkey -M menuselect '^xg' clear-screen
bindkey -M menuselect '^xi' vi-insert                      # Insert
bindkey -M menuselect '^xh' accept-and-hold                # Hold
bindkey -M menuselect '^xn' accept-and-infer-next-history  # Next
bindkey -M menuselect '^xu' undo                           # Undo

autoload -U compinit; compinit
_comp_options+=(globdots) # With hidden files

# Only work with the Zsh function vman
# See $DOTFILES/zsh/scripts.zsh
compdef vman="man"

# +---------+
# | Options |
# +---------+

# setopt GLOB_COMPLETE      # Show autocompletion menu with globs
setopt MENU_COMPLETE        # Automatically highlight first element of completion menu
setopt AUTO_LIST            # Automatically list choices on ambiguous completion.
setopt COMPLETE_IN_WORD     # Complete from both ends of a word.

# +---------+
# | zstyles |
# +---------+

# Ztyle pattern
# :completion:<function>:<completer>:<command>:<argument>:<tag>

# Define completers
zstyle ':completion:*' completer _extensions _complete _approximate

# Use cache for commands using cache
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "${XDG_CACHE_HOME:-${HOME}/.cache}/zsh/.zcompcache"
# Complete the alias when _expand_alias is used as a function
zstyle ':completion:*' complete true

zle -C alias-expension complete-word _generic
bindkey '^Xa' alias-expension
zstyle ':completion:alias-expension:*' completer _expand_alias

# Use cache for commands which use it

# Allow you to select in a menu
# zstyle ':completion:*' menu select
zstyle ':completion:*' menu no

# Autocomplete options for cd instead of directory stack
zstyle ':completion:*' complete-options true

zstyle ':completion:*' file-sort modification


# zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
# zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %D %d --%f'
# zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
# zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'

zstyle ':completion:*:*:*:*:corrections' format '!- %d (errors: %e) -!'
zstyle ':completion:*:*:*:*:descriptions' format '-- %D %d --'
zstyle ':completion:*:*:*:*:messages' format ' -- %d --'
zstyle ':completion:*:*:*:*:warnings' format ' -- no matches found --'

zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
zstyle ':fzf-tab:*' use-fzf-default-opts yes
zstyle ':fzf-tab:*' switch-group '<' '>'

# zstyle ':completion:*:default' list-prompt '%S%M matches%s'
# Colors for files and directory
zstyle ':completion:*:*:*:*:default' list-colors ${(s.:.)LS_COLORS}

# Only display some tags for the command cd
zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
# zstyle ':completion:*:complete:git:argument-1:' tag-order !aliases

# Required for completion to be in good groups (named after the tags)
zstyle ':completion:*' group-name ''

zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins functions commands

# See ZSHCOMPWID "completion matching control"
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

zstyle ':completion:*' keep-prefix true

zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,${HOME}/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'

# }}}

# {{{ plugins
for plugin in $(echo ${HOME}/.config/zsh/custom/plugins/* | sort); do source $plugin/*.plugin.zsh; done
# }}}

#{{{ Tools
eval "$(mise activate zsh)"
export EDITOR=nvim
eval "$(starship init zsh)"
eval "$(thefuck --alias)"

function fzfCompletion(){
  local version=$(fzf --version)
  if [[ $version > "0.47" ]]; then
    source <(fzf --zsh)
  else
    # local localCompletion="${HOME}/.local/share/zsh/site-functions/_fzf"
    # [ -f $localCompletion ] || curl https://raw.githubusercontent.com/junegunn/fzf/refs/tags/$version/shell/completion.zsh > $localCompletion
    # source $localCompletion
    source ${HOME}/.local/share/zsh/custom/fzf-tab-completion/zsh/fzf-zsh-completion.sh
  fi
}

fzfCompletion

export RANGER_LOAD_DEFAULT_RC=FALSE

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/nobut/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

# pnpm
export PNPM_HOME="/Users/nobut/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# Mise currently failing to install ruby on my mac, so here is a workaround
source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh
source $(brew --prefix)/opt/chruby/share/chruby/auto.sh
RUBY_3=$(ls ${HOME}/.rubies | egrep 'ruby-3\.*' | tail -n1)
mise link --force ruby@3 ${HOME}/.rubies/${RUBY_3} && mise reshim
unset RUBY_3
#}}}

# {{{ PATH
export PATH="$HOME/.local/bin:${PATH}"
export PATH="$HOME/go/bin:${PATH}"
# }}} 

#{{{ Aliases and functions

# CLI conveniences
alias vim=nvim
alias ivm=nvim
alias vimdiff='nvim -d'
alias vo='nvim -c "Oil"'
alias nvo='cd ${HOME}/.config/nvim; nvim -c "Oil"'
alias vd='nvim -c "Neotree"'
alias nvd='cd ${HOME}/.config/nvim; vd'
alias nvconf=nvd
alias ag='rg'

alias cz=chezmoi

alias l=eza
alias ll='l --long --all'
alias tree='l --tree --ignore-glob ".git/*|node_modules/*"'

alias mkdir='mkdir -p'

alias lg=lazygit

alias icat='kitten icat'
alias kc='cz edit ${HOME}/.config/kitty/kitty.conf'

alias @scratch='cd ${HOME}/Documents/scratch'
alias scratch="vim ${HOME}/Documents/scratch/$(date +%F)"

export DOTFILES_HOME="$(cz dump-config | jq -r '.workingTree')"
alias @dfd="cz cd"
alias dfd="@dfd; vd"

alias z='cz edit ${HOME}/.zshrc'
alias sz='source ${HOME}/.zshrc'

alias fzf="fzf --preview 'file {}' --bind '?:preview:bat {}'"

[ $(command -v fdfind) ] && alias fd=fdfind

function brew (){
  local function updateBrewfile(){
    local brewfile=$DOTFILES_HOME/assets/Brewfile
    echo "Dumping changed Brewfile ($brewfile)"
    brew bundle dump --file=$brewfile --force
    if [ $? ] && [[ "true" = $(cz dump-config | jq '.git.autocommit') ]]; then
      pushd $DOTFILES_HOME
      if [ $? ] && [ ! $(git diff --quiet) ]; then
        echo "Adding changes to Brewfile"
        git add $brewfile
        echo "Commiting changes to Brewfile"
        git commit -m "Update assets/Brewfile"
        if [ $? ] && [[ "true" = $(cz dump-config | jq '.git.autopush') ]]; then
          echo "Pushing changes to Brewfile"
          git push origin
        fi
      else 
        echo "No change to Brewfile"
      fi
      popd
    fi
  }
  case $1 in
    install)
      ;&
    uninstall)
      command brew "$@" && updateBrewfile
      ;;
    *)
      command brew "$@"
      ;;
  esac
}

#{{{ Git conveniences
function gamf (){ git commit -a --fixup "${@:-@}" }
alias gb='git branch'
alias gbls="git branch -vv | egrep -v '^\s*(ABANDONED|DONE)'"
alias gbu='echo "The upstream branch: $(git rev-parse --abbrev-ref --symbolic-full-name @{u})"'
alias gc='git checkout'
alias gd='git diff'
alias gds='git diff --staged'
alias glg='git log --graph --tags --decorate --oneline $(git rev-parse --abbrev-ref --symbolic-full-name HEAD @{u})'
alias glga='git log --graph --decorate --oneline --all'
alias gri='git rebase -i'
alias gria='git rebase -i --autosquash'
alias garia='gamf; gria'
alias grim='git rebase -i origin/master'
alias gst='git status'
#}}}

#{{{ Java conveniences
gw () {
    local tld=$(git rev-parse --show-toplevel)
    eq=$(test $(pwd) = "${tld}")
    "${eq}" || pushd "${tld}"
    ./gradlew $@
    "${eq}" || popd
}
#}}}

# {{{ Command History
hgrep() {
  fc -Dlim "*$@*" 1
}

# }}} 

# {{{ Text Search
function fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" |
  fzf --preview "highlight -O ansi -l {} 2> /dev/null | \
  rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || \
  rg --ignore-case --pretty --context 10 '$1' {}"
}
# }}} 

# {{{ Project aliases
function res {
	local input=$1 
	local dest="${WORKSPACE}/blehrer/resonance"
	[ $input ] && cd $dest/$input || cd $dest
}
function bl {
	local input=$1 
	local dest="${WORKSPACE}/blehrer"
	[ $input ] && cd $dest/$input || cd $dest
}
alias blog='bl blehrer.github.io/blog && chruby ruby-3.4.1'
alias draft="nvim $(bl blehrer.github.io)/blog/_drafts/${1:$(date +%F)}.md"

# }}} 
#}}}

# vim: ts=2 sts=2 sw=2 et foldmethod=marker
